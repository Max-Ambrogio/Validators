{"version":3,"sources":["base-validator.js"],"names":["BaseValidator","element","options","dataset","messages","JSON","stringify","feedback","parentNode","querySelector","span","document","createElement","classList","add","appendChild","addEventListener","handleChange","value","console","error","evt","changedValue","isValid","validate","textContent","Object","values","parse","join","key","message","updateDomMessages","setupDom","setupListeners"],"mappings":";;;;;;;;;;IAAMA,a,6BACF,uBAAYC,OAAZ,EAAoC;AAAA;;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAAA,oCAQzB,YAAM;AACb,QAAI,CAAC,KAAI,CAACD,OAAL,CAAaE,OAAb,CAAqBC,QAA1B,EAAoC;AAChC,MAAA,KAAI,CAACH,OAAL,CAAaE,OAAb,CAAqBC,QAArB,GAAgCC,IAAI,CAACC,SAAL,CAAe,EAAf,CAAhC;AACH;;AAED,IAAA,KAAI,CAACC,QAAL,GAAgB,KAAI,CAACN,OAAL,CAAaO,UAAb,CAAwBC,aAAxB,CAAsC,WAAtC,CAAhB;;AAEA,QAAG,CAAC,KAAI,CAACF,QAAT,EAAmB;AACf,UAAMG,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAb;AACAF,MAAAA,IAAI,CAACG,SAAL,CAAeC,GAAf,CAAmB,SAAnB;;AACA,MAAA,KAAI,CAACb,OAAL,CAAaO,UAAb,CAAwBO,WAAxB,CAAoCL,IAApC;;AACA,MAAA,KAAI,CAACH,QAAL,GAAgBG,IAAhB;AACH;AACJ,GArBmC;;AAAA,0CAuBnB,YAAM;AACnB,IAAA,KAAI,CAACT,OAAL,CAAae,gBAAb,CAA8B,QAA9B,EAAwC,KAAI,CAACC,YAA7C;AACH,GAzBmC;;AAAA,oCA2BzB,UAACC,KAAD,EAAW;AAClBC,IAAAA,OAAO,CAACC,KAAR,CAAc,6CAAd,EADkB,CAElB;;AACA,WAAO,KAAP;AACH,GA/BmC;;AAAA,wCAiCrB,UAACC,GAAD,EAAS;AACpB,QAAMC,YAAY,GAAG,KAAI,CAACrB,OAAL,CAAaiB,KAAlC;AAEA,IAAA,KAAI,CAACK,OAAL,GAAe,KAAI,CAACC,QAAL,CAAcF,YAAd,CAAf;AAEA,IAAA,KAAI,CAACf,QAAL,CAAckB,WAAd,GAA4BC,MAAM,CAACC,MAAP,CAActB,IAAI,CAACuB,KAAL,CAAW,KAAI,CAAC3B,OAAL,CAAaE,OAAb,CAAqBC,QAAhC,CAAd,EAAyDyB,IAAzD,CAA8D,GAA9D,CAA5B,CALoB,CAMxB;AACA;AACA;AACA;AACA;AACA;AACA;AACC,GA9CmC;;AAAA,oCAiDzB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACzB,IAAA,KAAI,CAACC,iBAAL,CAAuBF,GAAvB,EAA4BC,OAA5B,EADyB,CAEzB;;AACH,GApDmC;;AAAA,uCAsDtB,UAACD,GAAD,EAAS;AACnB,IAAA,KAAI,CAACE,iBAAL,CAAuBF,GAAvB,EAA4B,EAA5B,EADmB,CAEnB;;AACH,GAzDmC;;AAAA,6CA2DhB,UAACA,GAAD,EAAMZ,KAAN,EAAgB;AAChC,QAAId,QAAQ,GAAG,KAAI,CAACH,OAAL,CAAaE,OAAb,CAAqBC,QAApC;AACAA,IAAAA,QAAQ,GAAGC,IAAI,CAACuB,KAAL,CAAWxB,QAAX,CAAX;AACAA,IAAAA,QAAQ,CAAC0B,GAAD,CAAR,GAAgBZ,KAAhB;AACA,IAAA,KAAI,CAACjB,OAAL,CAAaE,OAAb,CAAqBC,QAArB,GAAgCC,IAAI,CAACC,SAAL,CAAeF,QAAf,CAAhC;AACH,GAhEmC;;AAChC,OAAKH,OAAL,GAAeA,OAAf;AACA,OAAKC,OAAL,GAAeA,OAAf,CAFgC,CAGhC;;AACA,OAAK+B,QAAL;AACA,OAAKC,cAAL;AACH,C","sourcesContent":["class BaseValidator {\r\n    constructor(element , options = {}) {\r\n        this.element = element\r\n        this.options = options\r\n        // this.messages = {}\r\n        this.setupDom()\r\n        this.setupListeners()\r\n    }\r\n\r\n    setupDom = () => {\r\n        if (!this.element.dataset.messages) {\r\n            this.element.dataset.messages = JSON.stringify({})\r\n        }\r\n\r\n        this.feedback = this.element.parentNode.querySelector('.feedback')\r\n\r\n        if(!this.feedback) {\r\n            const span = document.createElement('span')\r\n            span.classList.add('feeback')\r\n            this.element.parentNode.appendChild(span)\r\n            this.feedback = span\r\n        }\r\n    }\r\n\r\n    setupListeners = () => {\r\n        this.element.addEventListener(\"change\", this.handleChange)\r\n    }\r\n\r\n    validate = (value) => {\r\n        console.error('no validate() method in child class defined')\r\n        // console.log('BaseValidator.validate with: ', value)\r\n        return false\r\n    }\r\n\r\n    handleChange = (evt) => {\r\n        const changedValue = this.element.value\r\n\r\n        this.isValid = this.validate(changedValue)\r\n\r\n        this.feedback.textContent = Object.values(JSON.parse(this.element.dataset.messages)).join(' ')\r\n    //    if(!this.isValid){\r\n    //        console.log(\"value is not valid: \", changedValue)\r\n    //        this.feedback.textContent = \"not valid\"\r\n    //    } else {\r\n    //        console.log(\"value is valid: \", changedValue)\r\n    //        this.feedback.textContent = \"\"\r\n    //    }\r\n    }\r\n    \r\n\r\n    addError = (key, message) => {\r\n        this.updateDomMessages(key, message)\r\n        // this.messages[key] = message\r\n    }\r\n\r\n    removeError = (key) => {\r\n        this.updateDomMessages(key, '')\r\n        // this.messages[key] = \"\"\r\n    }\r\n\r\n    updateDomMessages = (key, value) => {\r\n        let messages = this.element.dataset.messages\r\n        messages = JSON.parse(messages)\r\n        messages[key] = value\r\n        this.element.dataset.messages = JSON.stringify(messages)\r\n    }\r\n}"],"file":"base-validator.js"}